first(program) = {void, int}
first(declaration-list) = {void, int}
first(declaration) = {void, int}
first(declaration') = {;, [, (}
first(var-declaration) = {int, void}
first(var-declaration') = {;, [}
first(type-specifier) = {int, void}
first(fun-declaration) = {(}
first(params) = {void, int}
first(param-list) = {int}
first(param) = {int}
first(compound-stmt) = {'{'}
first(local-declarations) = {ε, int, void}
first(statement-list) = {ε, '{', ;, if, while, return, id, num, (}
first(statement) = {'{', ;, if, while, return, id, num, (}
first(expression-stmt) = {;, id, num, (}
first(selection-stmt) = {if}
first(iteration-stmt) = {while}
first(return-stmt) = {return}
first(return-stmt') = {;, id, num, (}
first(expression) = {id, num, (}
first(expression') = {=, [, (}
first(expression'') = {=, ε, *, /}
first(simple-expression) = {ε, *, /}
first(relop) = {<=, <, >, >=, ==, !=}
first(additive-expression) = {(, id, num}
first(additive-expression') = {ε, *, /}
first(addop) = {+, -}
first(term) = {(, id, num}
first(term') = {ε, *, /}
first(mulop) = {*, /}
first(factor) = {(, id, num}
first(varcall) = {[, (, ε}
first(args) = {ε, id, num, (}
first(arg-list) = {id, num, (}

follow(program) = {$}
follow(declaration-list) = {$}
follow(declaration) = {$, void, int}
follow(declaration') = {$, void, int}
follow(var-declaration) = {int, void, '{', ;, if, while, return, id, num, (, '}'}
follow(var-declaration') = {$, void, int, '{', ;, if, while, return, id, num, (, '}'}
follow(type-specifier) = {;, [}
follow(fun-declaration) = {$, void, int}
follow(params) = {)}
follow(param-list) = {)}
follow(param) = {',', )}
follow(compound-stmt) = {$, void, int, '{', ;, if, while, return, id, num, (, '}', else}
follow(local-declarations) = {'{', ;, if, while, return, id, num, (, '}'}
follow(statement-list) = {'}'}
follow(statement) = {'{', ;, if, while, return, id, num, (, '}', else}
follow(expression-stmt) = {'{', ;, if, while, return, id, num, (, '}', else}
follow(selection-stmt) = {'{', ;, if, while, return, id, num, (, '}', else}
follow(iteration-stmt) = {'{', ;, if, while, return, id, num, (, '}', else}
follow(return-stmt) = {'{', ;, if, while, return, id, num, (, '}', else}
follow(return-stmt') = {'{', ;, if, while, return, id, num, (, '}', else}
follow(expression) = {;, ), ], ','}
follow(expression') = {;, ), ], ','}
follow(expression'') = {;, ), ], ','}
follow(simple-expression) = {;, ), ], ','}
follow(relop) = {(, id, num}
follow(additive-expression) = {;, ), ], ','}
follow(additive-expression') = {<=, <, >, >=, ==, !=, ;, ), ], ','}
follow(addop) = {(, id, num}
follow(term) = {+, -, <=, <, >, >=, ==, !=, ;, ), ], ','}
follow(term') = {+, -, <=, <, >, >=, ==, !=, ;, ), ], ','}
follow(mulop) = {(, id, num}
follow(factor) = {*, /, +, -, <=, <, >, >=, ==, !=, ;, ), ], ','}
follow(varcall) = {*, /, +, -, <=, <, >, >=, ==, !=, ;, ), ], ','}
follow(args) = {)}
follow(arg-list) = {)}

The grammar has been checked and is LL(1)