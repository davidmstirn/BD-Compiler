program -> declaration-list
declaration-list -> declaration {declaration}
declaration -> void ID fun-declaration | int ID declaration'
declaration' -> var-declaration' | fun-declaration
var-declaration -> type-specifier var-declaration'
var-declaration' -> ; | [ NUM ] ;
type-specifier -> int | void
fun-declaration -> ( params ) compound-stmt
params -> param-list | void
param-list -> param {, param}
param -> int ID [[ ]]
compound-stmt -> { local-declarations statement-list }
local-declarations -> ε | var-declaration {var-declaration}
statement-list -> ε | statement {statement}
statement -> expression-stmt | compound-stmt | selection-stmt | iteration-stmt | return-stmt
expression-stmt -> expression ; | ;
selection-stmt -> if ( expression ) statement [else statement]
iteration-stmt -> while  ( expression ) statement
return-stmt -> return return-stmt'
return-stmt' -> ; | expression ;
expression -> ID expression' | NUM simple-expression | ( expression ) simple-expression
expression' -> = expression | [ expression ] expression'' | ( args ) simple-expression
expression'' -> = expression | simple-expression
simple-expression -> additive-expression' [relop additive-expression]
relop -> <= | < | > | >= | == | !=
additive-expression -> term {addop term}
additive-expression' -> term' {addop term}
addop -> + | -
term -> factor {mulop factor}
term' -> ε | mulop factor {mulop factor}
mulop -> * | /
factor -> ( expression ) | ID varcall | NUM
varcall -> ε | [ expression ] | ( args )
args -> ε | arg-list
arg-list -> expression {, expression}